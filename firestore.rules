/**
 * @fileoverview Firestore Security Rules for Tactical Rainbow Online.
 *
 * Core Philosophy:
 * This ruleset enforces a player-ownership model for matches, ensuring only players involved in a match can modify it.
 * User profiles are private and only accessible to the owning user.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /matches/{matchId}: Stores match data, accessible to the two players involved.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; listing user profiles is denied.
 * - Matches are only modifiable by players participating in the match.
 * - No schema validation is performed in this prototype to allow for faster iteration.
 *
 * Denormalization for Authorization:
 * - The /matches/{matchId} documents contain denormalized 'player1Id' and 'player2Id' fields. This avoids the need for costly `get()` calls to other collections to determine authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data, ensuring only the owner can read or write.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete, list): if request.auth.uid == userId
     * @deny (get, create, update, delete, list): if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId} {
      // Read permissions: Only the user can read their own profile.
      allow get: if isOwner(userId);
      allow list: if false; // Listing user profiles is not allowed.

      // Write permissions: Only the user can create, update, and delete their own profile.
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.auth.uid == userId;
      allow delete: if isExistingOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Secure match data, ensuring only players in the match can read or write.
     * @path /matches/{matchId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid == request.resource.data.player1Id || request.auth.uid == request.resource.data.player2Id;
     * @allow (update, delete): if resource.data.player1Id == request.auth.uid || resource.data.player2Id == request.auth.uid;
     * @deny (create, update, delete): if !(resource.data.player1Id == request.auth.uid || resource.data.player2Id == request.auth.uid);
     * @principle Enforces shared access based on the 'player1Id' and 'player2Id' fields in the document.
     */
    match /matches/{matchId} {
      // Read permissions: Anyone can read match data.
      allow get: if true;
      allow list: if true;

      // Write permissions: Only players involved in the match can modify it.
      allow create: if isSignedIn() && (request.auth.uid == request.resource.data.player1Id || request.auth.uid == request.resource.data.player2Id);
      allow update: if isExistingPlayer(request.auth.uid, resource.data.player1Id, resource.data.player2Id);
      allow delete: if isExistingPlayer(request.auth.uid, resource.data.player1Id, resource.data.player2Id);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isPlayer(authUid, player1Id, player2Id) {
    return authUid == player1Id || authUid == player2Id;
  }

  function isExistingPlayer(authUid, player1Id, player2Id) {
    return isPlayer(authUid, player1Id, player2Id) && resource != null;
  }
}