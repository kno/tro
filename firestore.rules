/**
 * @fileoverview Firestore Security Rules for Tactical Rainbow Online.
 *
 * Core Philosophy:
 * This ruleset enforces a player-ownership model for matches, ensuring only players involved in a match can modify it. User profiles are accessible only to the owning user.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles, accessible only by the user.
 * - /matches/{matchId}: Stores match data.  Includes denormalized player IDs for simpler rules.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data shape validation is relaxed during prototyping to enable rapid iteration.
 * - Authorization relies on denormalized `player1Id` and `player2Id` fields within the `match` document to avoid costly `get()` calls.
 * - Players can only update a match if they are player1 or player2 of that match.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is either player1 or player2 in a match.
     */
    function isPlayerInMatch(matchId) {
      return isSignedIn() && (request.resource.data.player1Id == request.auth.uid || request.resource.data.player2Id == request.auth.uid);
    }

    /**
     * @description Checks if the authenticated user is either player1 or player2 in a match for EXISTING document.
     */
    function isExistingPlayerInMatch(matchId) {
        return isSignedIn() && (resource.data.player1Id == request.auth.uid || resource.data.player2Id == request.auth.uid);
    }
    
    /**
     * @description Checks if the authenticated user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for the /userProfiles/{userId} collection.
     * @path /userProfiles/{userId}
     * @allow (create) User 'user123' can create their profile if authenticated as 'user123'.
     * @deny (create) User 'user456' cannot create a profile with ID 'user123'.
     * @allow (get) User 'user123' can read their profile if authenticated as 'user123'.
     * @deny (get) User 'user456' cannot read profile 'user123'.
     * @principle Enforces user-ownership; users can only access their own profile data.
     */
    match /userProfiles/{userId} {
      // Read rules: only the owner can read their profile
      allow get: if isOwner(userId);
      allow list: if false;

      // Write rules: only the owner can create, update, or delete their profile
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /matches/{matchId} collection.
     * @path /matches/{matchId}
     * @allow (create) A user can create a match. Validation ensures player1Id matches the auth UID.
     * @deny (create) An unauthenticated user cannot create a match.
     * @allow (get) Any user can read match data.
     * @deny (update) A user who is not player1 or player2 cannot update the match.
     * @principle Enforces player-ownership; only players in the match can modify it. Public read access.
     */
    match /matches/{matchId} {
      // Read rules: anyone can read match data
      allow get: if true;
      allow list: if false;

      // Write rules: only players in the match can create, update, or delete it
      allow create: if isSignedIn() && request.resource.data.player1Id == request.auth.uid;
      allow update: if isExistingPlayerInMatch(matchId);
      allow delete: if isExistingPlayerInMatch(matchId);
    }
  }
}