/**
 * @fileoverview Firestore Security Rules for Tactical Rainbow Online.
 *
 * Core Philosophy:
 * This ruleset enforces a collaborative access control model for matches,
 * where both players involved in a match have read and write access.
 * User profiles are private and only accessible to the owning user.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profile data, accessible only by the user themselves.
 * - /matches/{matchId}: Stores match data, accessible to the two players involved in the match.
 *
 * Key Security Decisions:
 * - Players can only update matches they are participating in (player1Id or player2Id).
 * - User profiles are strictly private; only the owner can read or write their profile.
 * - Listing all user profiles is disallowed.
 *
 * Denormalization for Authorization:
 * - The `matches` collection denormalizes `player1Id` and `player2Id` on each match document.
 *   This allows security rules to directly check if the requesting user is one of the players.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is one of the players in the match.
     */
    function isPlayerInMatch(player1Id, player2Id) {
        return request.auth.uid == player1Id || request.auth.uid == player2Id;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * @details Combines the ownership check with an existence check to prevent
     *          operations on non-existent documents.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description User profile access rules.
     * @path /userProfiles/{userId}
     * @allow (get) User gj7J4 can read their own profile.
     * @allow (create) User gj7J4 can create their own profile.
     * @allow (update) User gj7J4 can update their own profile.
     * @allow (delete) User gj7J4 can delete their own profile.
     * @deny (get) User hTNf1 cannot read user gj7J4's profile.
     * @deny (create) User hTNf1 cannot create user gj7J4's profile.
     * @deny (update) User hTNf1 cannot update user gj7J4's profile.
     * @deny (delete) User hTNf1 cannot delete user gj7J4's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Match data access rules.
     * @path /matches/{matchId}
     * @allow (get) User gj7J4 can read match hjiYajDAuXU3D468W2wc if they are a player in the match.
     * @allow (create) User gj7J4 can create a match where they are one of the players.
     * @allow (update) User gj7J4 can update match hjiYajDAuXU3D468W2wc if they are a player in the match.
     * @allow (delete) User gj7J4 can delete match hjiYajDAuXU3D468W2wc if they are a player in the match.
     * @deny (get) User hTNf1 cannot read match hjiYajDAuXU3D468W2wc if they are not a player in the match.
     * @deny (create) User hTNf1 cannot create a match where they are not one of the players.
     * @deny (update) User hTNf1 cannot update match hjiYajDAuXU3D468W2wc if they are not a player in the match.
     * @deny (delete) User hTNf1 cannot delete match hjiYajDAuXU3D468W2wc if they are not a player in the match.
     * @principle Enforces collaborative access control for matches.
     */
    match /matches/{matchId} {
      allow get: if isPlayerInMatch(resource.data.player1Id, resource.data.player2Id);
      allow list: if true;
      allow create: if isSignedIn() && (request.resource.data.player1Id == request.auth.uid || request.resource.data.player2Id == request.auth.uid);
      allow update: if isSignedIn() && isPlayerInMatch(resource.data.player1Id, resource.data.player2Id) && resource != null;
      allow delete: if isSignedIn() && isPlayerInMatch(resource.data.player1Id, resource.data.player2Id) && resource != null;
    }
  }
}