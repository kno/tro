/**
 * @fileoverview Firestore Security Rules for Tactical Rainbow Online.
 *
 * Core Philosophy:
 * This ruleset enforces a player-ownership model for matches, ensuring only players involved in a match can modify it. User profiles are private and only accessible to the owning user.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores profile information for each user.
 * - /matches/{matchId}: Stores match data, including player IDs and game state.
 *
 * Key Security Decisions:
 * - User profiles are private and readable only by the owning user.
 * - Matches can only be updated by players involved in the match (player1Id or player2Id).
 * - Listing user profiles is disallowed to prevent information harvesting.
 * - The `matches` collection stores all matches, both public and private.
 *
 * Denormalization for Authorization:
 * The `matches` document includes `player1Id` and `player2Id` fields to avoid costly `get()` operations when enforcing player-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource, using the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is player 1 or player 2 of the match.
     */
    function isPlayerInMatch(player1Id, player2Id) {
      return request.auth.uid == player1Id || request.auth.uid == player2Id;
    }

    /**
     * @description Checks if the requesting user is an existing owner of the resource, using the provided userId and ensuring the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Enforces document ownership for user profiles.
     * @path /userProfiles/{userId}
     * @allow (get) User 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2' can read their own profile.
     * @allow (create) User 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2' can create their own profile.
     * @allow (update) User 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2' can update their own profile.
     * @allow (delete) User 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2' can delete their own profile.
     * @deny (get) User 'hTNf1kwjztXd6ZLMZoClvtssnnJ3' cannot read user profile 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2'.
     * @deny (create) User 'hTNf1kwjztXd6ZLMZoClvtssnnJ3' cannot create user profile 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2'.
     * @deny (update) User 'hTNf1kwjztXd6ZLMZoClvtssnnJ3' cannot update user profile 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2'.
     * @deny (delete) User 'hTNf1kwjztXd6ZLMZoClvtssnnJ3' cannot delete user profile 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2'.
     * @principle Restricts access to a user's own data tree and enforces document ownership for writes.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces player-based access control for matches.
     * @path /matches/{matchId}
     * @allow (get) Any signed-in user can read match data.
     * @allow (update) User 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2' can update the match 'iHkQGqyrNyDbEE4JNdTY' because they are player2.
     * @deny (create) User 'hTNf1kwjztXd6ZLMZoClvtssnnJ3' cannot create a match.
     * @deny (update) User 'hTNf1kwjztXd6ZLMZoClvtssnnJ3' cannot update match 'iHkQGqyrNyDbEE4JNdTY' if they are not a player in the match.
     * @deny (delete) User 'hTNf1kwjztXd6ZLMZoClvtssnnJ3' cannot delete the match.
     * @principle Enforces document ownership (player association) for writes.
     */
    match /matches/{matchId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (getAfter(resource).data.player1Id == request.auth.uid || getAfter(resource).data.player2Id == request.auth.uid);
      allow delete: if false;
    }
  }
}