/**
 * @fileOverview Firestore Security Rules for Tactical Rainbow Online.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of owner-based and shared access control.
 * User profiles are strictly private, accessible only to the owning user.
 * Matches are secured to allow participation by the two designated players.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores private user data, accessible only to the user.
 * - /matches/{matchId}: Stores match data, accessible to the two players involved.
 *
 * Key Security Decisions:
 * - User profiles are not listable.
 * - Matches are accessible for read/write by the two players.
 * - The `matches` collection uses denormalized `player1Id` and `player2Id` fields for efficient authorization.
 * - There is no administrative role.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile.
     * @deny (get, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to match data.
     * @path /matches/{matchId}
     * @allow (get, list) if true (public read)
     * @allow (create) if the user is player1.
     * @allow (update, delete) if the user is either player1 or player2.
     * @deny (create, update, delete) if the user is not a player in the match.
     * @principle Enforces shared access for the two players in a match.
     */
    match /matches/{matchId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isPlayer1(match) {
        return isSignedIn() && request.auth.uid == match.data.player1Id;
      }

      function isPlayer2(match) {
        return isSignedIn() && request.auth.uid == match.data.player2Id;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.player1Id == request.auth.uid;
      allow update: if isSignedIn() && (request.resource.data.player1Id == request.auth.uid || request.resource.data.player2Id == request.auth.uid) && (resource.data.player1Id == request.auth.uid || resource.data.player2Id == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.player1Id == request.auth.uid || resource.data.player2Id == request.auth.uid);
    }
  }
}