/**
 * @fileoverview Firestore Security Rules for Tactical Rainbow Online.
 *
 * Core Philosophy:
 * This ruleset enforces a player-ownership model for matches, ensuring only players involved in a match can modify it. User profiles are accessible only to the owning user.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profile data, with 'userId' matching the Firebase Auth UID.
 * - /matches/{matchId}: Stores match data, including denormalized 'player1Id' and 'player2Id' fields.
 *
 * Key Security Decisions:
 * - Users can only create, update, and delete their own user profiles. Listing all user profiles is disallowed.
 * - Matches can be read by anyone, but only players involved in the match can update or delete it.
 *
 * Denormalization for Authorization:
 * The 'matches' collection denormalizes 'player1Id' and 'player2Id' on each match document. This enables direct authorization checks against `request.auth.uid` without needing additional reads or complex queries.  For example, to check if a user is a player in a match, the rules can directly evaluate `request.auth.uid == resource.data.player1Id || request.auth.uid == resource.data.player2Id`.
 *
 * Structural Segregation:
 * Public and private matches are differentiated within the same 'matches' collection using the 'isPublic' flag. This simplifies querying for available public games while still enabling secure access control for private matches via `joinCode` (though the joinCode is not validated in these rules).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own user profile.
     * @path /userProfiles/{userId}
     * @allow (create) - User with UID 'user123' creates their profile at /userProfiles/user123
     * @allow (update) - User with UID 'user123' updates their profile at /userProfiles/user123
     * @allow (get) - User with UID 'user123' retrieves their profile at /userProfiles/user123
     * @deny (create) - User with UID 'user456' attempts to create a profile at /userProfiles/user123
     * @deny (update) - User with UID 'user456' attempts to update profile at /userProfiles/user123
     * @deny (list) - Any user attempts to list all profiles
     * @principle Enforces document ownership for user profiles.
     */
    match /userProfiles/{userId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      // Permissions
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages access control for match documents. Anyone can read, but only players in the match can modify.
     * @path /matches/{matchId}
     * @allow (get) - Any user can read match data.
     * @allow (update) - User with UID 'user123' updates match 'match789' where they are player1 or player2.
     * @deny (update) - User with UID 'user456' attempts to update match 'match789' where they are not a player.
     * @principle Allows public reads, restricts writes to match participants.
     */
    match /matches/{matchId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }

      function isPlayer(match) {
        return isSignedIn() && (request.auth.uid == match.player1Id || request.auth.uid == match.player2Id);
      }


      // Permissions
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (request.auth.uid == resource.data.player1Id || request.auth.uid == resource.data.player2Id);
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.player1Id || request.auth.uid == resource.data.player2Id);
    }
  }
}