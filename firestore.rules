/**
 * @fileoverview Firestore Security Rules for Tactical Rainbow Online.
 *
 * Core Philosophy:
 * This ruleset enforces a player-ownership model for matches, ensuring only players involved in a match can modify it. User profiles are private and only accessible to the owning user.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores user profile information, with 'userId' matching the Firebase Auth UID.
 * - /matches/{matchId}: Stores match data, including 'player1Id' and 'player2Id' to identify the participants.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Listing user profiles is disallowed to protect user privacy.
 * - Match updates are restricted to the players involved in the match (either player1 or player2).
 *
 * Denormalization for Authorization:
 * - The 'matches' collection denormalizes 'player1Id' and 'player2Id' onto each match document. This allows security rules to directly check user authorization without requiring additional 'get()' calls.
 *
 * Structural Segregation:
 * - Public and private matches are differentiated using the `isPublic` flag within the `matches` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data, allowing only the owner to read and write.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner of the profile.
     * @deny (create, update, delete) if the user is not the owner of the profile.
     * @deny list: Listing user profiles is not permitted.
     * @principle Enforces document ownership for all operations.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Secure match data, allowing only players involved in the match to update it. Anyone can read.
     * @path /matches/{matchId}
     * @allow (get, list) any user can read.
     * @allow (create, update, delete) only player1 or player2 can modify it.
     * @deny (create, update, delete) if the user is not player1 or player2.
     * @principle Enforces shared access between two players for updates.
     */
    match /matches/{matchId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isPlayer(player1Id, player2Id) {
          return isSignedIn() && (request.auth.uid == player1Id || request.auth.uid == player2Id);
      }

      allow get, list: if true;
      allow create: if isPlayer(request.resource.data.player1Id, request.resource.data.player2Id) && request.resource.data.player1Id != null && request.resource.data.player2Id != null;
      allow update: if isPlayer(resource.data.player1Id, resource.data.player2Id) && resource != null;
      allow delete: if isPlayer(resource.data.player1Id, resource.data.player2Id) && resource != null;
    }
  }
}