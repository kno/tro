/**
 * @fileoverview Firestore Security Rules for Tactical Rainbow Online.
 *
 * Core Philosophy:
 * This ruleset enforces a player-access model for matches, where only the players involved
 * in a match can modify its game state. User profiles are private and only accessible to the
 * owning user. The rules prioritize authorization independence, avoiding `get()` calls
 * by denormalizing player IDs directly onto the match documents.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles, secured by owner-only access.
 * - /matches/{matchId}: Stores match data, with player1Id and player2Id fields for authorization.
 *
 * Key Security Decisions:
 * - Players can only update matches in which they are participants.
 * - User profiles are private; listing is denied.
 * - The rules explicitly deny any write access not covered by the defined logic.
 *
 * Denormalization for Authorization:
 * - The `matches` collection denormalizes `player1Id` and `player2Id` on each document.
 *   This allows rules to directly check `request.auth.uid` against these fields, avoiding costly
 *   `get()` calls to retrieve player information from separate `userProfiles` documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Ensures only the user can read/write their own profile.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete, list) if the user's UID matches the userId.
     * @deny (get, create, update, delete, list) if the user's UID does not match the userId.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to match documents. Only players in the match can update it.
     * @path /matches/{matchId}
     * @allow (get, list) if true (public read).
     * @allow (create) if the user is creating a match and sets player1Id to their UID.
     * @allow (update, delete) if the user is player1 or player2 and the document exists.
     * @deny (create, update, delete) if the conditions above are not met.
     * @principle Enforces that only participating players can modify match data.
     */
    match /matches/{matchId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isPlayer(player1Id, player2Id) {
        return isSignedIn() && (request.auth.uid == player1Id || request.auth.uid == player2Id);
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.player1Id == request.auth.uid;
      allow update: if isPlayer(resource.data.player1Id, resource.data.player2Id) && resource != null;
      allow delete: if isPlayer(resource.data.player1Id, resource.data.player2Id) && resource != null;
    }
  }
}