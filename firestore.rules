/**
 * @file Tactical Rainbow Online Firestore Security Rules
 *
 * @core_philosophy This ruleset enforces a role-based access control model for matches.
 * Only players involved in a match (player1 or player2) can update the match.
 * User profiles are owner-readable and writable. Public matches can be read by anyone.
 *
 * @data_structure
 * - /userProfiles/{userId}: Stores individual user profile data. Each user can only access their own profile.
 * - /matches/{matchId}: Stores match data. Includes player1Id and player2Id for authorization.
 *
 * @key_security_decisions
 * - Users can only create, read, update, and delete their own user profiles.
 * - Listing of user profiles is disallowed.
 * - Updates to matches are restricted to the players involved in the match.
 *
 * @denormalization_for_authorization
 * - Matches include player1Id and player2Id directly in the document to avoid needing to make `get()` calls to the `/userProfiles` collection to check player identity. This simplifies and speeds up authorization checks.
 *
 * @structural_segregation
 * - Public and private matches are stored in the same collection (`/matches/{matchId}`), but the `isPublic` flag allows for secure filtering in queries, and the presence of `joinCode` field restricts access to private matches.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param None
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the UIDs match, false otherwise.
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is one of the players in the match.
     * @param {string} player1Id - The ID of the first player.
     * @param {string} player2Id - The ID of the second player.
     * @return {boolean} True if the user is one of the players, false otherwise.
     */
    function isPlayerInMatch(player1Id, player2Id) {
        return isSignedIn() && (request.auth.uid == player1Id || request.auth.uid == player2Id);
    }

    /**
     * @description Checks if the authenticated user is one of the players in the match and the document exists.
     * @param {string} player1Id - The ID of the first player.
     * @param {string} player2Id - The ID of the second player.
     * @return {boolean} True if the user is one of the players and the document exists, false otherwise.
     */
    function isExistingPlayerInMatch(player1Id, player2Id) {
        return resource != null && isPlayerInMatch(player1Id, player2Id);
    }

    /**
     * @description Rules for user profiles.
     * @path /userProfiles/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get) - A user can read their own profile if the userId matches their auth.uid.
     * @allow (update) - A user can update their own profile if the userId matches their auth.uid.
     * @allow (delete) - A user can delete their own profile if the userId matches their auth.uid.
     * @deny (create) - A user cannot create a profile for another user (userId does not match auth.uid).
     * @deny (get) - A user cannot read another user's profile (userId does not match auth.uid).
     * @deny (update) - A user cannot update another user's profile (userId does not match auth.uid).
     * @deny (delete) - A user cannot delete another user's profile (userId does not match auth.uid).
     * @principle Enforces document ownership for user profiles.
     */
    match /userProfiles/{userId} {
      // Read Rules
      allow get: if isOwner(userId);
      allow list: if false;

      // Write Rules
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for matches.
     * @path /matches/{matchId}
     * @allow (get) - Anyone can read a match.
     * @allow (list) - Anyone can list matches.
     * @allow (update) - Only players in the match can update it.
     * @deny (create) - Only players in the match can create a match.
     * @deny (delete) - Only players in the match can delete a match.
     * @principle Enforces that only the players involved in a match can update match data.
     */
    match /matches/{matchId} {
      // Read Rules
      allow get: if true;
      allow list: if true;

      // Write Rules
      allow create: if false;
      allow update: if isExistingPlayerInMatch(resource.data.player1Id, resource.data.player2Id);
      allow delete: if false;
    }
  }
}