/**
 * @fileoverview Firestore Security Rules for Tactical Rainbow Online.
 *
 * Core Philosophy:
 * This ruleset enforces a player-ownership model for matches, where only players
 * involved in a match can modify its game state. User profiles are private
 * and only accessible to the owning user.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profile data.
 * - /matches/{matchId}: Stores match data, including player IDs.
 *
 * Key Security Decisions:
 * - Players can only modify matches they are participating in.
 * - User profiles are private and only accessible to the owner.
 * - Data validation is relaxed during the prototyping phase, focusing on
 *   authorization checks and relational integrity (e.g., user ID consistency).
 *
 * Denormalization for Authorization:
 * - The `matches` collection includes `player1Id` and `player2Id` directly
 *   on each document to avoid costly `get()` calls when validating player
 *   access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /userProfiles/{userId}
     * @allow (get, create, update, delete, list) if the user's UID matches the userId.
     * @deny (create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /userProfiles/{userId} {
      // Helper function to check if the user is the owner of the profile.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is an existing owner of the profile.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User profiles should not be generally listable.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to match documents. Allows players in the match to read and update the match.
     * @path /matches/{matchId}
     * @allow (get, list) if true (public read).
     * @allow (create) if request.auth.uid matches either player1Id or player2Id in the request.
     * @allow (update, delete) if request.auth.uid matches either player1Id or player2Id in the existing document.
     * @deny (create, update, delete) if request.auth.uid does not match either player1Id or player2Id.
     * @principle Enforces document ownership for writes, restricts access to authorized players.
     */
    match /matches/{matchId} {
      // Helper function to check if the user is a player in the match.
      function isPlayer(player1Id, player2Id) {
        return request.auth.uid == player1Id || request.auth.uid == player2Id;
      }

      // Helper function to check if the user is an existing player in the match.
      function isExistingPlayer() {
        return resource != null && (request.auth.uid == resource.data.player1Id || request.auth.uid == resource.data.player2Id);
      }

      allow get, list: if true;
      allow create: if isPlayer(request.resource.data.player1Id, request.resource.data.player2Id);
      allow update: if isExistingPlayer();
      allow delete: if isExistingPlayer();
    }
  }
}