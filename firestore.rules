/**
 * @fileOverview Firestore Security Rules for Tactical Rainbow Online.
 *
 * Core Philosophy:
 * This ruleset enforces a shared-access model for matches, where each match has two authorized players (player1Id and player2Id).
 * User profiles are secured for owner-only access.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profile data, accessible only to the owning user.
 * - /matches/{matchId}: Stores match data, accessible to the two players involved in the match.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; only the owning user can read or write their profile.
 * - Match data is accessible to both player1 and player2, enabling collaborative gameplay.
 * - No user listing is allowed for userProfiles.
 *
 * Denormalization for Authorization:
 * The /matches/{matchId} documents include denormalized `player1Id` and `player2Id` fields. This is CRUCIAL for efficient security rules.  It avoids costly `get()` operations to determine if a user is a participant in a match.  Rules can directly check `request.auth.uid` against these fields.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data. Only the owning user can read or write their profile.
     * @path /userProfiles/{userId}
     * @allow (get, update, delete) User 'user_abc' can read/write their own profile.
     * @deny (get, update, delete) User 'user_xyz' cannot read/write user 'user_abc' profile.
     * @allow (create) User 'user_abc' can create their profile if their auth UID matches the document ID.
     * @deny (create) User 'user_abc' cannot create a profile with a mismatched ID.
     * @principle Enforces document ownership; users can only manage their own profile data.
     */
    match /userProfiles/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure match data. Only player1 and player2 can read or write match data.
     * @path /matches/{matchId}
     * @allow (get, update, delete) Player 'user_abc' can read/write match 'match_123' if they are either player1 or player2.
     * @deny (get, update, delete) User 'user_xyz' cannot read/write match 'match_123' if they are not player1 or player2.
     * @allow (create) Player 'user_abc' can create a match.
     * @deny (create) User 'user_abc' cannot create a match with invalid data.
     * @principle Enforces shared access; only players in the match can modify it.
     */
    match /matches/{matchId} {
      function isPlayer(player1Id, player2Id) {
        return request.auth.uid == player1Id || request.auth.uid == player2Id;
      }

      function isExistingPlayer(player1Id, player2Id) {
        return isPlayer(player1Id, player2Id) && resource != null;
      }
      
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if isExistingPlayer(resource.data.player1Id, resource.data.player2Id);
      allow delete: if isExistingPlayer(resource.data.player1Id, resource.data.player2Id);
    }
  }
}