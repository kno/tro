rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(/databases/$(database)/documents/userProfiles/$(userId));
    }

    /**
     * @description Checks if the authenticated user is a player in the match.
     * @return {boolean} True if the user is a player, false otherwise.
     */
    function isPlayerInMatch() {
      return isSignedIn() && (resource.data.player1Id == request.auth.uid || resource.data.player2Id == request.auth.uid);
    }
    
    /**
     * @description Security rules for user profiles.
     * @path /userProfiles/{userId}
     * @allow (create) If the user is creating their own profile (userId matches auth.uid).
     * @allow (get) If the user is requesting their own profile (userId matches auth.uid).
     * @allow (update) If the user is updating their own profile (userId matches auth.uid).
     * @allow (delete) If the user is deleting their own profile (userId matches auth.uid).
     * @deny (list) Listing user profiles is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /userProfiles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for matches.
     * @path /matches/{matchId}
     * @allow (get, list) If the match is public (isPublic == true).
     * @allow (create) If the player1Id in the request matches the authenticated user's UID.
     * @allow (update) If the user is a player in the match.
     * @allow (delete) If the user is a player in the match.
     * @deny (create) If the player1Id in the request does not match the authenticated user's UID.
     * @deny (update) If the user is not a player in the match.
     * @deny (delete) If the user is not a player in the match.
     * @principle Allows public read access for public matches, and restricts write access to players involved in the match.
     */
    match /matches/{matchId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.player1Id == request.auth.uid;
      allow update: if isPlayerInMatch();
      allow delete: if isPlayerInMatch();
    }
  }
}