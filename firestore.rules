/**
 * @fileoverview Firestore Security Rules for Tactical Rainbow Online.
 *
 * Core Philosophy: This ruleset enforces a collaborative access model for matches,
 * where both players in a match have read and write access to the match document.
 * User profiles are private and only accessible to the owning user.
 *
 * Data Structure:
 * - /userProfiles/{userId}: Stores individual user profiles.
 * - /matches/{matchId}: Stores match data, including player IDs.
 *
 * Key Security Decisions:
 * - User profiles are private; only the owning user can read or write them.
 * - Matches are collaborative; both players have equal access.
 * - Data shape is not strictly validated to allow for prototyping.
 *
 * Denormalization for Authorization:
 * - The `matches` documents contain `player1Id` and `player2Id` fields. This denormalization
 *   is CRITICAL for security because it allows us to authorize match access directly
 *   without needing to perform additional `get()` operations to fetch player profiles
 *   or memberships. Without these denormalized fields, it would be impossible to
 *   write efficient and secure rules for match access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userId}
     * @allow (get, update, delete) User 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2' can read, update, and delete their own profile.
     * @allow (create) User 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2' can create their own profile if the userId matches their auth UID.
     * @deny (get, update, delete) User 'anotherUser' cannot read, update, or delete user 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /userProfiles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User profiles are not listable.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to match documents.
     * @path /matches/{matchId}
     * @allow (get, update) User 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2' can read and update the match if they are player1 or player2.
     * @allow (create) User 'gj7J4ZrXacPn5OXIsxdjxfyCSYw2' can create a match.
     * @deny (update, delete) User 'anotherUser' cannot update the match if they are not player1 or player2.
     * @principle Enforces shared access for players in a match.
     */
    match /matches/{matchId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isPlayer(match) {
        return isSignedIn() && (request.auth.uid == match.player1Id || request.auth.uid == match.player2Id);
      }

      allow get: if isSignedIn(); // Require auth for read.
      allow list: if isSignedIn(); // Require auth for list.
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (resource.data.player1Id == request.auth.uid || resource.data.player2Id == request.auth.uid);
      allow delete: if false;
    }
  }
}